#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <thread>
#include <string>
#include <vector>

#include "helpers.cpp"

using namespace std;

char* response = nullptr;

void receiveAndExecuteFile(int sockfd) {
    // send single to receive file
    // then get file and execute it
    char message[] = "send_file";

    send_data(sockfd, message, strlen(message));

    char* buffer = receive(sockfd);
    fprintf(stdout, "file received\n");

    // write buffer to a file
    // execute the file
    // get the output of the file
    // and copy it to response
    
    FILE* f = fopen("target.c", "w");
    
    // write it to the file
    fprintf(f, "%s", buffer);
    
    // close the file
    fclose(f);
    
    // delete the buffer
    delete[] buffer;
    
    // run and get output
    buffer = new char[0x100];
    
    string command = "gcc target.c -o target && ./target";

    FILE* pipe = popen(command.c_str(), "r");

    if (!pipe) {
        fprintf(stderr, "Unable to execute\n");
        exit(1);
    }

    string output;
    
    while (!feof(pipe)) {
        if (fgets(buffer, 0x100, pipe)) {
            output.append(buffer);
        }
    }

    pclose(pipe);
    delete[] buffer;

    response = new char[output.size() + 1];
    strncpy(response, output.c_str(), output.size());
    response[output.size()] = 0;
}

void handleClient(int sockfd) {
    // wait for file to compile and execute
    while (response == nullptr);
    
    fprintf(stdout, "sending output\n");
    // send the output
    send_data(sockfd, response, strlen(response));

    close(sockfd);
}

int main(int argc, char *argv[]) {
    if(argc < 2) {
        fprintf(stderr, "Port Number Not Provided, Program Terminated.");
        exit(1);
    }

    int sockfd;
    int newsockfd;
    int portno;
    int n;
    struct sockaddr_in serv_addr;
    struct sockaddr_in cli_addr;
    socklen_t cli_len;

    sockfd = socket(AF_INET, SOCK_STREAM, 0);

    if(sockfd < 0) {
        fprintf(stderr, "Error Opening Socket.");
        exit(1);
    }

    bzero((char *) &serv_addr, sizeof(serv_addr));
    portno = atoi(argv[1]);
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_addr.s_addr = INADDR_ANY;
    serv_addr.sin_port = htons(portno);
    
    if(bind(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0) {
        fprintf(stderr, "Binding Failed.");
        exit(1);
    }

    listen(sockfd, 10);
    cli_len = sizeof(cli_addr);
    
    int count = 0;
    bool fileReceived = false;
    vector<thread*> threads;

    // handle 10 clients
    while (count < 10) {
        // receive connection and then start thread
        // to handle that connection
        
        newsockfd = accept(sockfd, (struct sockaddr *) & cli_addr, &cli_len);

        if (newsockfd < 0) {
            fprintf(stderr, "Error On Accept.");
            continue;
        }

        fprintf(stdout, "Connected, sockfd: %d\n", newsockfd);

        // if its the first client then
        // send signal to send file
        
        if (!fileReceived) {
            // this is the first client hence
            // client can send file
            fileReceived = true;
            thread* newThread = new thread(receiveAndExecuteFile, newsockfd);
            threads.push_back(newThread);
        }

        // otherwise send output generated by the file

        // create thread for this socket
        thread* newThread = new thread(handleClient, newsockfd);
        threads.push_back(newThread);
        count += 1;
    }

    // wait for all the threads to finish
    for (auto &th: threads) {
        th->join();
    }

    delete[] response;
    close(sockfd);
    return 0;
}

